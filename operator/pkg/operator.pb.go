// Code generated by protoc-gen-go.
// source: operator.proto
// DO NOT EDIT!

/*
Package operator is a generated protocol buffer package.

It is generated from these files:
	operator.proto

It has these top-level messages:
	Canary
	CanaryList
	CanaryGatewayListQuery
	CanaryGatewayDescribeQuery
	Job
	JobList
*/
package pkg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_NEW          Status = 0
	Status_INITIALIZING Status = 1
	Status_PENDING      Status = 2
	Status_SUCCESS      Status = 3
	Status_FAILURE      Status = 4
	Status_TIMEOUT      Status = 5
)

var Status_name = map[int32]string{
	0: "NEW",
	1: "INITIALIZING",
	2: "PENDING",
	3: "SUCCESS",
	4: "FAILURE",
	5: "TIMEOUT",
}
var Status_value = map[string]int32{
	"NEW":          0,
	"INITIALIZING": 1,
	"PENDING":      2,
	"SUCCESS":      3,
	"FAILURE":      4,
	"TIMEOUT":      5,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Canary struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,enum=Status" json:"status,omitempty"`
	Jobs   []*Job `protobuf:"bytes,100,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *Canary) Reset()                    { *m = Canary{} }
func (m *Canary) String() string            { return proto.CompactTextString(m) }
func (*Canary) ProtoMessage()               {}
func (*Canary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Canary) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Canary) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_NEW
}

func (m *Canary) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type CanaryList struct {
	Data []*Canary `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *CanaryList) Reset()                    { *m = CanaryList{} }
func (m *CanaryList) String() string            { return proto.CompactTextString(m) }
func (*CanaryList) ProtoMessage()               {}
func (*CanaryList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CanaryList) GetData() []*Canary {
	if m != nil {
		return m.Data
	}
	return nil
}

// The query is always using OR between same types and ANDs between other fields, e.g.
// { statuses: [INITIALIZING, PENDING] } returns all canaries currently INITIALIZING <OR> PENDING
// { statuses: [INITIALIZING], ids: [1, 2, 3, 4] } only returns those from 1, 2, 3, 4 which are INITIALIZING
type CanaryGatewayListQuery struct {
	Ids      []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Statuses []Status `protobuf:"varint,2,rep,packed,name=statuses,enum=Status" json:"statuses,omitempty"`
}

func (m *CanaryGatewayListQuery) Reset()                    { *m = CanaryGatewayListQuery{} }
func (m *CanaryGatewayListQuery) String() string            { return proto.CompactTextString(m) }
func (*CanaryGatewayListQuery) ProtoMessage()               {}
func (*CanaryGatewayListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CanaryGatewayListQuery) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *CanaryGatewayListQuery) GetStatuses() []Status {
	if m != nil {
		return m.Statuses
	}
	return nil
}

// The query either accepts the ID generated by the system or the name provided by the
// user during the creation of the canary.
type CanaryGatewayDescribeQuery struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *CanaryGatewayDescribeQuery) Reset()                    { *m = CanaryGatewayDescribeQuery{} }
func (m *CanaryGatewayDescribeQuery) String() string            { return proto.CompactTextString(m) }
func (*CanaryGatewayDescribeQuery) ProtoMessage()               {}
func (*CanaryGatewayDescribeQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CanaryGatewayDescribeQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CanaryGatewayDescribeQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Job struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status Status `protobuf:"varint,2,opt,name=status,enum=Status" json:"status,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_NEW
}

type JobList struct {
	Data []*JobList `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *JobList) Reset()                    { *m = JobList{} }
func (m *JobList) String() string            { return proto.CompactTextString(m) }
func (*JobList) ProtoMessage()               {}
func (*JobList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JobList) GetData() []*JobList {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Canary)(nil), "Canary")
	proto.RegisterType((*CanaryList)(nil), "CanaryList")
	proto.RegisterType((*CanaryGatewayListQuery)(nil), "CanaryGatewayListQuery")
	proto.RegisterType((*CanaryGatewayDescribeQuery)(nil), "CanaryGatewayDescribeQuery")
	proto.RegisterType((*Job)(nil), "Job")
	proto.RegisterType((*JobList)(nil), "JobList")
	proto.RegisterEnum("Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CanaryGateway service

type CanaryGatewayClient interface {
	Create(ctx context.Context, in *Canary, opts ...grpc.CallOption) (*Canary, error)
	List(ctx context.Context, in *CanaryGatewayListQuery, opts ...grpc.CallOption) (*CanaryList, error)
	Describe(ctx context.Context, in *CanaryGatewayDescribeQuery, opts ...grpc.CallOption) (*Canary, error)
}

type canaryGatewayClient struct {
	cc *grpc.ClientConn
}

func NewCanaryGatewayClient(cc *grpc.ClientConn) CanaryGatewayClient {
	return &canaryGatewayClient{cc}
}

func (c *canaryGatewayClient) Create(ctx context.Context, in *Canary, opts ...grpc.CallOption) (*Canary, error) {
	out := new(Canary)
	err := grpc.Invoke(ctx, "/CanaryGateway/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canaryGatewayClient) List(ctx context.Context, in *CanaryGatewayListQuery, opts ...grpc.CallOption) (*CanaryList, error) {
	out := new(CanaryList)
	err := grpc.Invoke(ctx, "/CanaryGateway/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *canaryGatewayClient) Describe(ctx context.Context, in *CanaryGatewayDescribeQuery, opts ...grpc.CallOption) (*Canary, error) {
	out := new(Canary)
	err := grpc.Invoke(ctx, "/CanaryGateway/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CanaryGateway service

type CanaryGatewayServer interface {
	Create(context.Context, *Canary) (*Canary, error)
	List(context.Context, *CanaryGatewayListQuery) (*CanaryList, error)
	Describe(context.Context, *CanaryGatewayDescribeQuery) (*Canary, error)
}

func RegisterCanaryGatewayServer(s *grpc.Server, srv CanaryGatewayServer) {
	s.RegisterService(&_CanaryGateway_serviceDesc, srv)
}

func _CanaryGateway_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Canary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanaryGatewayServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CanaryGateway/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanaryGatewayServer).Create(ctx, req.(*Canary))
	}
	return interceptor(ctx, in, info, handler)
}

func _CanaryGateway_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanaryGatewayListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanaryGatewayServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CanaryGateway/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanaryGatewayServer).List(ctx, req.(*CanaryGatewayListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CanaryGateway_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanaryGatewayDescribeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CanaryGatewayServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CanaryGateway/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CanaryGatewayServer).Describe(ctx, req.(*CanaryGatewayDescribeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _CanaryGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CanaryGateway",
	HandlerType: (*CanaryGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CanaryGateway_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CanaryGateway_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _CanaryGateway_Describe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operator.proto",
}

// Client API for Operator service

type OperatorClient interface {
	Initialize(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	Finish(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
}

type operatorClient struct {
	cc *grpc.ClientConn
}

func NewOperatorClient(cc *grpc.ClientConn) OperatorClient {
	return &operatorClient{cc}
}

func (c *operatorClient) Initialize(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/Operator/Initialize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorClient) Finish(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/Operator/Finish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Operator service

type OperatorServer interface {
	Initialize(context.Context, *Job) (*Job, error)
	Finish(context.Context, *Job) (*Job, error)
}

func RegisterOperatorServer(s *grpc.Server, srv OperatorServer) {
	s.RegisterService(&_Operator_serviceDesc, srv)
}

func _Operator_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operator/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Initialize(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operator_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Operator/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServer).Finish(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

var _Operator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Operator",
	HandlerType: (*OperatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _Operator_Initialize_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _Operator_Finish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "operator.proto",
}

func init() { proto.RegisterFile("operator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x8b, 0xd4, 0x40,
	0x10, 0xcd, 0x97, 0x49, 0xa6, 0x46, 0x87, 0x50, 0x87, 0x35, 0x64, 0x17, 0x1c, 0xda, 0x83, 0xa3,
	0x87, 0x3e, 0x44, 0xf0, 0x28, 0x2e, 0xd9, 0xec, 0xd2, 0xc3, 0x98, 0xd1, 0x64, 0x86, 0x05, 0x6f,
	0x1d, 0xd3, 0x60, 0x8b, 0xa6, 0x97, 0xa4, 0x17, 0x59, 0xff, 0x85, 0xff, 0x58, 0xd2, 0x99, 0xd1,
	0x8d, 0xe8, 0xc1, 0x4b, 0xa8, 0xf7, 0x3a, 0xf5, 0xf1, 0x5e, 0x15, 0x2c, 0xd4, 0x8d, 0xe8, 0xb8,
	0x56, 0x1d, 0xbd, 0xe9, 0x94, 0x56, 0xa4, 0x02, 0x3f, 0xe3, 0x2d, 0xef, 0xee, 0x70, 0x01, 0x8e,
	0x6c, 0x62, 0x7b, 0x69, 0xaf, 0x66, 0xa5, 0x23, 0x1b, 0x7c, 0x02, 0x7e, 0xaf, 0xb9, 0xbe, 0xed,
	0x63, 0x67, 0x69, 0xaf, 0x16, 0x69, 0x40, 0x2b, 0x03, 0xcb, 0x03, 0x8d, 0x31, 0x78, 0x9f, 0x55,
	0xdd, 0xc7, 0xcd, 0xd2, 0x5d, 0xcd, 0x53, 0x8f, 0xae, 0x55, 0x5d, 0x1a, 0x86, 0x3c, 0x07, 0x18,
	0x8b, 0x6e, 0x64, 0xaf, 0xf1, 0x14, 0xbc, 0x86, 0x6b, 0x1e, 0xdb, 0xe6, 0xbf, 0x80, 0x8e, 0x4f,
	0xa5, 0x21, 0xc9, 0x16, 0x4e, 0x46, 0x7c, 0xc5, 0xb5, 0xf8, 0xc6, 0x4d, 0xc6, 0xfb, 0x5b, 0xd1,
	0xdd, 0x61, 0x04, 0xae, 0x6c, 0x7a, 0x93, 0x35, 0x2b, 0x87, 0x10, 0x9f, 0x42, 0x38, 0xb6, 0x16,
	0xc3, 0x4c, 0xee, 0xfd, 0x99, 0x7e, 0x3d, 0x90, 0x37, 0x90, 0x4c, 0x0a, 0x5e, 0x88, 0xfe, 0x63,
	0x27, 0x6b, 0x31, 0x16, 0xfd, 0x53, 0x24, 0x82, 0xd7, 0xf2, 0xaf, 0xc2, 0x48, 0x9c, 0x95, 0x26,
	0x26, 0xaf, 0xc0, 0x5d, 0xab, 0xfa, 0xbf, 0xfd, 0x20, 0xcf, 0x20, 0x58, 0xab, 0xda, 0x48, 0x3e,
	0x9b, 0x48, 0x0e, 0xe9, 0x81, 0x1f, 0x35, 0xbf, 0xb8, 0x06, 0x7f, 0x4c, 0xc5, 0x00, 0xdc, 0x22,
	0xbf, 0x8e, 0x2c, 0x8c, 0xe0, 0x21, 0x2b, 0xd8, 0x8e, 0x9d, 0x6f, 0xd8, 0x07, 0x56, 0x5c, 0x45,
	0x36, 0xce, 0x21, 0x78, 0x97, 0x17, 0x17, 0x03, 0x70, 0x06, 0x50, 0xed, 0xb3, 0x2c, 0xaf, 0xaa,
	0xc8, 0x1d, 0xc0, 0xe5, 0x39, 0xdb, 0xec, 0xcb, 0x3c, 0xf2, 0x06, 0xb0, 0x63, 0x6f, 0xf3, 0xed,
	0x7e, 0x17, 0x3d, 0x48, 0x7f, 0xd8, 0xf0, 0x68, 0x22, 0x1e, 0xcf, 0xc0, 0xcf, 0x3a, 0xc1, 0xb5,
	0xc0, 0xa3, 0xef, 0xc9, 0x31, 0x20, 0x16, 0x52, 0xf0, 0xcc, 0xb8, 0x8f, 0xe9, 0xdf, 0x77, 0x90,
	0xcc, 0xe9, 0xef, 0x3d, 0x12, 0x0b, 0x53, 0x08, 0x8f, 0x76, 0xe2, 0x29, 0xfd, 0xb7, 0xcd, 0xf7,
	0x7a, 0xa4, 0xaf, 0x21, 0xdc, 0x1e, 0x4e, 0x0e, 0x13, 0x00, 0xd6, 0x4a, 0x2d, 0xf9, 0x17, 0xf9,
	0x5d, 0xa0, 0xb9, 0x98, 0xc4, 0x7c, 0x89, 0x85, 0x27, 0xe0, 0x5f, 0xca, 0x56, 0xf6, 0x9f, 0xa6,
	0x7c, 0xed, 0x9b, 0x3b, 0x7d, 0xf9, 0x33, 0x00, 0x00, 0xff, 0xff, 0x52, 0x89, 0x04, 0x15, 0xb9,
	0x02, 0x00, 0x00,
}
